{"version":3,"file":"component---src-pages-resources-customer-dashboard-lesson-2-md-b901c99a00cd1b4c08be.js","mappings":"4SAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,wCADR,0CAGA,sEAAuD,uBAAYC,WAAW,KAAvB,QAAvD,sFACA,+BAAgB,uBAAYA,WAAW,KAAvB,gBAAhB,YAAoF,cAAGA,WAAW,IAC9F,KAAQ,uDADwE,gBAApF,8GAGA,2BAAY,uBAAYA,WAAW,KAAvB,mBAAZ,YAAmF,uBAAYA,WAAW,KAAvB,sBAAnF,4OAA6X,cAAGA,WAAW,IACvY,KAAQ,oHADiX,QAA7X,MAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,oqBA2BL,6DAA8C,uBAAYA,WAAW,KAAvB,gBAA9C,MACA,oBACE,eAAIA,WAAW,MAAf,sBAA0C,uBAAYA,WAAW,MAAvB,qDAC1C,eAAIA,WAAW,MAAf,YAAgC,cAAGA,WAAW,KAC1C,KAAQ,wJADoB,gBAGhC,eAAIA,WAAW,MAAf,kCAAsD,uBAAYA,WAAW,MAAvB,aAAtD,KAAiH,cAAGA,WAAW,KAC3H,KAAQ,kIADqG,sCAGjH,eAAIA,WAAW,MAAf,gBAAoC,cAAGA,WAAW,KAC9C,KAAQ,+JADwB,kBAApC,aAEwC,uBAAYA,WAAW,MAAvB,aAFxC,MAEoG,uBAAYA,WAAW,MAAvB,UAFpG,MAE6J,uBAAYA,WAAW,MAAvB,UAF7J,+CAE+P,uBAAYA,WAAW,MAAvB,UAF/P,qFAEuY,uBAAYA,WAAW,MAAvB,SAFvY,uBAEgd,uBAAYA,WAAW,MAAvB,QAFhd,4CAGA,eAAIA,WAAW,MAAf,gBAAoC,uBAAYA,WAAW,MAAvB,sBAApC,mBAAsH,uBAAYA,WAAW,MAAvB,QAAtH,2HAAkS,uBAAYA,WAAW,MAAvB,oBAAlS,aAEF,gFACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,ozDAyDL,qDAAsC,cAAGA,WAAW,IAChD,KAAQ,0EAD0B,UAAtC,eAEkC,uBAAYA,WAAW,KAAvB,QAFlC,0KAE4P,uBAAYA,WAAW,KAAvB,iBAF5P,iDAEsW,eAAIA,WAAW,MAFrX,kJAG2I,cAAGA,WAAW,IACrJ,KAAQ,+HAD+H,oBAH3I,oKAMA,qHAAsG,uBAAYA,WAAW,KAAvB,6BAAtG,YAAuL,eAAIA,WAAW,MAAtM,uHACgH,uBAAYA,WAAW,KAAvB,UADhH,uCACyM,eAAIA,WAAW,MADxN,qTAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,8TAkBR,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://adobe-developer-app-builder/./src/pages/resources/customer-dashboard/lesson2.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/adobe-developer-app-builder/adobe-developer-app-builder/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"lesson-2-explore-the-app-builder-app\"\n    }}>{`Lesson 2: Explore the App Builder App`}</h1>\n    <p>{`Within the newly created app, you have seen the `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file which contains your credentials for running the app. Let's explore further.`}</p>\n    <p>{`Firstly, `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` is the `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.npmjs.com/creating-a-package-json-file\"\n      }}>{`crucial part`}</a>{` of almost every NodeJS project. It contains the list of dependencies, version, reproducible builds, etc.`}</p>\n    <p>{`Then `}<inlineCode parentName=\"p\">{`ext.config.yaml`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`src/dx-excshell-1/`}</inlineCode>{` folder is the cockpit of your App Builder app backend. It lists the declaration of serverless actions including name, source files, runtime kind, default params, annotations, and so on. You can find the grammar of writing manifest `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/apache/openwhisk-wskdeploy/blob/master/docs/programming_guide.md#wskdeploy-utility-by-example\"\n      }}>{`here`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`operations:\n  workerProcess:\n    - type: action\n      impl: dx-asset-compute-worker-1/worker\nhooks:\n  post-app-run: adobe-asset-compute devtool\n  test: adobe-asset-compute test-worker\nactions: actions\nruntimeManifest:\n  packages:\n    dx-asset-compute-worker-1:\n      license: Apache-2.0\n      actions:\n        get-profiles:\n          function: actions/get-profiles/index.js\n          web: 'yes'\n          runtime: 'nodejs:14'\n          inputs:\n              LOG_LEVEL: debug\n              tenant: $CAMPAIGN_STANDARD_TENANT\n              apiKey: $SERVICE_API_KEY\n          annotations:\n            require-adobe-auth: true\n            final: true\n`}</code></pre>\n    <p>{`Currently your app only has one action `}<inlineCode parentName=\"p\">{`get-profiles`}</inlineCode>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Source code is at `}<inlineCode parentName=\"li\">{`src/dx-excshell-1/actions/get-profiles/index.js`}</inlineCode></li>\n      <li parentName=\"ul\">{`It is a `}<a parentName=\"li\" {...{\n          \"href\": \"/adobe-developer-app-builder/apis/experienceplatform/runtime/docs.html#!adobedocs/adobeio-runtime/master/guides/creating_actions.md#invoking-actions\"\n        }}>{`web action`}</a></li>\n      <li parentName=\"ul\">{`The action will be run in the `}<inlineCode parentName=\"li\">{`nodejs:12`}</inlineCode>{` `}<a parentName=\"li\" {...{\n          \"href\": \"/adobe-developer-app-builder/apis/experienceplatform/runtime/docs.html#!adobedocs/adobeio-runtime/master/reference/runtimes.md\"\n        }}>{`runtime container on I/O Runtime`}</a></li>\n      <li parentName=\"ul\">{`It has some `}<a parentName=\"li\" {...{\n          \"href\": \"/adobe-developer-app-builder/apis/experienceplatform/runtime/docs.html#!adobedocs/adobeio-runtime/master/guides/creating_actions.md#working-with-parameters\"\n        }}>{`default params`}</a>{` such as `}<inlineCode parentName=\"li\">{`LOG_LEVEL`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`tenant`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`apiKey`}</inlineCode>{`, which are automatically available in the `}<inlineCode parentName=\"li\">{`params`}</inlineCode>{` object of the action without passing it to the action for every invocation. The `}<inlineCode parentName=\"li\">{`final`}</inlineCode>{` annotation set as `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{` tells that those params are immutable.`}</li>\n      <li parentName=\"ul\">{`Setting the `}<inlineCode parentName=\"li\">{`require-adobe-auth`}</inlineCode>{` annotation as `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{` enables this action to be protected by Adobe IMS user token in the request header. Without it, the action will return `}<inlineCode parentName=\"li\">{`401 Unauthorized`}</inlineCode>{` error.`}</li>\n    </ul>\n    <p>{`Now let's have a deeper look at the action's source code.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * This action gets a list of customer profiles the Adobe Campaign Standard API\n */\n\nconst { Core } = require('@adobe/aio-sdk')\nconst { CampaignStandard } = require('@adobe/aio-sdk')\nconst { errorResponse, getBearerToken, stringParameters, checkMissingRequestInputs } = require('../utils')\n\n// main function that will be executed by Adobe I/O Runtime\nasync function main (params) {\n  // create a Logger\n  const logger = Core.Logger('main', { level: params.LOG_LEVEL || 'info' })\n\n  try {\n    // 'info' is the default level if not set\n    logger.info('Calling the main action')\n\n    // log parameters, only if params.LOG_LEVEL === 'debug'\n    logger.debug(stringParameters(params))\n\n    // check for missing request input parameters and headers\n    const requiredParams = ['apiKey', 'tenant']\n    const errorMessage = checkMissingRequestInputs(params, requiredParams, ['Authorization'])\n    if (errorMessage) {\n      // return and log client errors\n      return errorResponse(400, errorMessage, logger)\n    }\n\n    // extract the user Bearer token from the input request parameters\n    const token = getBearerToken(params)\n\n    // initialize the sdk\n    const campaignClient = await CampaignStandard.init(params.tenant, params.apiKey, token)\n\n    // get profiles from Campaign Standard\n    const profiles = await campaignClient.getAllProfiles()\n    logger.debug('profiles = ' + JSON.stringify(profiles, null, 2))\n    const response = {\n      statusCode: 200,\n      body: profiles\n    }\n\n    // log the response status code\n    logger.info(\\`\\${response.statusCode}: successful request\\`)\n    return response\n  } catch (error) {\n    // log any server errors\n    logger.error(error)\n    // return with 500\n    return errorResponse(500, 'server error', logger)\n  }\n}\n\nexports.main = main\n`}</code></pre>\n    <p>{`What happens here, is that the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/apache/openwhisk/blob/master/docs/actions-nodejs.md\"\n      }}>{`action`}</a>{` exposes a `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` function, which accepts a list of params from the client. It checks that required params for using the Campaign Standard SDK are present in this list, including the `}<inlineCode parentName=\"p\">{`Authorization`}</inlineCode>{` header for authentication against Adobe IMS.`}<br parentName=\"p\"></br>{`\n`}{`An access token is retrieved to initiate the SDK client instance, which is then used to retrieve the list of customer profiles using the `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.adobe.com/content/help/en/campaign-standard/using/working-with-apis/managing-profiles/retrieving-profiles.html\"\n      }}>{`getAllProfiles()`}</a>{` function. Finally the profiles are returned to the client. This whole execution is wrapped within a try-catch block, so that errors are handled appropriately.`}</p>\n    <p>{`Next, let's see how the web UI communicates with the backend. All web assets are placed in the `}<inlineCode parentName=\"p\">{`src/dx-excshell-1/web-src`}</inlineCode>{` folder.`}<br parentName=\"p\"></br>{`\n`}{`Beside a few auto-generated files that are useful for running your app on Adobe Experience Cloud (ExC) Shell, `}<inlineCode parentName=\"p\">{`App.js`}</inlineCode>{` is the extension point of your UI.`}<br parentName=\"p\"></br>{`\n`}{`By default, it contains 3 pages: Home and About are just static pages showing listing reference docs, and ActionsForm lists all available backend actions, allows you to select the action to be invoke, and once you click on the \"invoke\" button, it shows the invocation results in the browser console.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<View gridArea='content' padding='size-200'>\n  <Switch>\n    <Route exact path='/'>\n      <Home></Home>\n    </Route>\n    <Route path='/actions'>\n      <ActionsForm runtime={props.runtime} ims={props.ims} />\n    </Route>\n    <Route path='/about'>\n      <About></About>\n    </Route>\n  </Switch>\n</View>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}