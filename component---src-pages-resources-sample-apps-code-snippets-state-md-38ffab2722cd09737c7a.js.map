{"version":3,"file":"component---src-pages-resources-sample-apps-code-snippets-state-md-38ffab2722cd09737c7a.js","mappings":"4SAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,yBADR,0BAGA,eACE,GAAM,0CADR,2CAGA,qBAAK,iBAAMC,WAAW,MAClB,UAAa,uBADZ,mtDA8DL,eACE,GAAM,6CADR,8CAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,imEA4ER,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://adobe-developer-app-builder/./src/pages/resources/sample_apps/code_snippets/state.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/adobe-developer-app-builder/adobe-developer-app-builder/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"app-builder-state-sdk\"\n    }}>{`App Builder State SDK`}</h1>\n    <h2 {...{\n      \"id\": \"read-a-value-by-key-from-the-state-sdk\"\n    }}>{`Read a value by key from the State SDK`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * Read a value by key from the State SDK\n *\n * Sample curl request:\n * curl --location --request GET 'https://my-namespace.adobeioruntime.net/api/v1/web/my-app-0.0.1/state-read?key=name'\n */\nconst { Core, State } = require('@adobe/aio-sdk')\nconst { errorResponse, stringParameters, checkMissingRequestInputs } = require('../../utils')\n\n// main function that will be executed by Adobe I/O Runtime\nasync function main (params) {\n  // create a Logger\n  const logger = Core.Logger('main', { level: params.LOG_LEVEL || 'info' })\n\n  try {\n    // 'info' is the default level if not set\n    logger.info('Calling the main action')\n\n    // log parameters, only if params.LOG_LEVEL === 'debug'\n    logger.debug(stringParameters(params))\n\n    // check for missing request input parameters and headers\n    const requiredParams = ['key']\n    const requiredHeaders = []\n    const errorMessage = checkMissingRequestInputs(params, requiredParams, requiredHeaders)\n    if (errorMessage) {\n      // return and log client errors\n      return errorResponse(400, errorMessage, logger)\n    }\n\n    const state = await State.init()\n\n    const valueObj = await state.get(params.key)\n    let value = null\n    if (valueObj){\n      value = valueObj.value\n    }\n    logger.debug(\\`value=\\${value}\\`)\n\n    const response = {\n      statusCode: 200,\n      body: {\n        key: params.key,\n        value\n      }\n    }\n\n    // log the response status code\n    logger.info(\\`\\${response.statusCode}: successful request\\`)\n    return response\n  } catch (error) {\n    // log any server errors\n    logger.error(error)\n    // return with 500\n    return errorResponse(500, 'server error', logger)\n  }\n}\n\nexports.main = main\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"write-a-key-value-pair-into-the-state-sdk\"\n    }}>{`Write a key-value pair into the State SDK`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * Write a key-value pair into the State SDK\n *\n * Sample curl request:\n * curl --location --request POST 'https://my-namespace.adobeioruntime.net/api/v1/web/my-app-0.0.1/state-write' \\\\\n * --header 'Content-Type: application/json' \\\\\n * -- data-raw '{\n *     \"key\": \"name\",\n *     \"value\": \"James Bond\"\n * }'\n */\nconst { Core, State } = require('@adobe/aio-sdk')\nconst { errorResponse, stringParameters, checkMissingRequestInputs } = require('../../utils')\n\n// main function that will be executed by Adobe I/O Runtime\nasync function main (params) {\n  // create a Logger\n  const logger = Core.Logger('main', { level: params.LOG_LEVEL || 'info' })\n\n  try {\n    // 'info' is the default level if not set\n    logger.info('Calling the main action')\n\n    // log parameters, only if params.LOG_LEVEL === 'debug'\n    logger.debug(stringParameters(params))\n\n    // check for missing request input parameters and headers\n    const requiredParams = ['key', 'value']\n    const requiredHeaders = []\n    const errorMessage = checkMissingRequestInputs(params, requiredParams, requiredHeaders)\n    if (errorMessage) {\n      // return and log client errors\n      return errorResponse(400, errorMessage, logger)\n    }\n    \n    const state = await State.init()\n    const val = await state.get(params.key)\n    let result\n    // if key already exists, return its value\n    if (val != null) {\n      result = \\`reading \\${params.key}=\\${val.value}\\`\n    } \n    // else, save the k-v pair\n    else {\n      await state.put(params.key, params.value)\n      result = \\`writing \\${params.key}=\\${params.value}\\`\n    }\n\n    logger.debug(result)\n\n    const response = {\n      statusCode: 200,\n      body: {\n        key: params.key,\n        value: params.value,\n        message: result\n      }\n    }\n\n    // log the response status code\n    logger.info(\\`\\${response.statusCode}: successful request\\`)\n    return response\n  } catch (error) {\n    // log any server errors\n    logger.error(error)\n    // return with 500\n    return errorResponse(500, 'server error', logger)\n  }\n}\n\nexports.main = main\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}