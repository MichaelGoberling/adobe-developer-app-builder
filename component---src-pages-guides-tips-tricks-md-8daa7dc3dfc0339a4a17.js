"use strict";(self.webpackChunkadobe_developer_app_builder=self.webpackChunkadobe_developer_app_builder||[]).push([[1834],{14001:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return l},default:function(){return d}});var o=a(87462),n=a(63366),i=(a(15007),a(64983)),r=a(91515),s=["components"],l={},m={_frontmatter:l},p=r.Z;function d(e){var t=e.components,a=(0,n.Z)(e,s);return(0,i.mdx)(p,(0,o.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"tips-and-tricks-for-optimizing-app-builder-apps"},"Tips and Tricks for optimizing App Builder Apps"),(0,i.mdx)("p",null,"There are many areas in a web app where you could optimize the way it works, such as security, performance, and operational cost, to name a few. Here are some tips and tricks to help you gain the most out of your App Builder applications."),(0,i.mdx)("h2",{id:"caching-http-responses"},"Caching HTTP Responses"),(0,i.mdx)("p",null,"This method works extremely well if your action returns some results based on repeated user inputs as query params, e.g. details about an item on a webshop, or visualization of static data. In these cases, your backend action would be invoked once only, and then subsequent requests receive the results directly from the  cache by the expiry time. Serving results from cache is not only fast, but also saves the cost of action invocations."),(0,i.mdx)("p",null,"In order to configure the cache, you use the ",(0,i.mdx)("inlineCode",{parentName:"p"},"Cache-Control")," directive. Below is an example of an action that sets the cache with a TTL of 30 minutes. In the response object you will find an entry with ",(0,i.mdx)("inlineCode",{parentName:"p"},"X-GW-Cache: HIT")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"X-GW-Cache: MISS")," (depending on the answer being returned from cache or not)."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},"async function main (params) {\n  return {\n      headers: {\n        'Cache-Control': 'max-age=1800'\n      },\n      statusCode: 200,\n      body: { message: 'I am cached for 30 minutes.' }\n  }\n}\n")),(0,i.mdx)("p",null,"When you test this functionality for web action using Postman or web browser with developer tools opened, make sure that ",(0,i.mdx)("inlineCode",{parentName:"p"},"Cache-Control")," is not automatically set for all the requests."),(0,i.mdx)("h2",{id:"returning-large-response-payload"},"Returning Large Response Payload"),(0,i.mdx)("p",null,"You can return a ",(0,i.mdx)("a",{parentName:"p",href:"/adobe-developer-app-builder/apis/experienceplatform/runtime/docs#!adobedocs/adobeio-runtime/master/guides/system_settings.md"},"response payload of max 1MB")," in an Adobe I/O Runtime action. That is more than enough for the majority of the use cases we have seen so far. However, if your action would return a larger payload than the 1MB limit, we provide a scalable solution with ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/adobe/aio-lib-files"},"App Builder Files SDK"),". It allows you to ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/adobe/aio-lib-files/blob/master/doc/api.md#Files+write"},"persist a binary file to the blob storage"),", obtain ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/adobe/aio-lib-files/blob/master/doc/api.md#Files+generatePresignURL"},"a temporary downloadable URL")," and return an ",(0,i.mdx)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/302"},"HTTP Redirect response")," to the file with this URL. Below is a simple code snippet to demonstrate that."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},"const fileLocation = '/private-dir/large-image.png'\nconst files = await Files.init()\nawait files.write(fileLocation, fileContent)\n\n// Generate a presigned URL of the file that is valid for 60 seconds only\nconst presignUrl = await files.generatePresignURL(fileLocation, { expiryInSeconds: 60 })\n\nreturn {\n  headers: { location: presignUrl }, \n  statusCode: 302\n}\n")),(0,i.mdx)("h2",{id:"implementing-a-move-operation-for-the-app-builder-files-sdk"},"Implementing a move operation for the App Builder Files SDK"),(0,i.mdx)("p",null,"While handling large files within a Runtime action using ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/adobe/aio-lib-files"},"App Builder Files SDK"),", you might have the need to move those files to another location in the underlying cloud storage, e.g. for archiving purpose when computing is over."),(0,i.mdx)("p",null,"We have decided until now to not expose a move operation in our abstraction, for the two main following reasons:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Some cloud storage APIs do not provide an atomic move operation, meaning that there is a tradeoff between abstraction and consistency. Users might expect that files operations on single files are atomic. Operations on folders are not atomic neither."),(0,i.mdx)("li",{parentName:"ul"},"The implementation of such a feature is a two-liner, which makes it simple enough to implement and test the abstraction at application level")),(0,i.mdx)("p",null,"This is our recommendation to implement the move operation at application level by using the ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/adobe/aio-lib-files"},"App Builder Files SDK")," primitives:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Note: this operation is not atomic.\n * Moves files from one location to another in the remote storage. \n *  \n * @param {Files} files the files instance\n * @param {string} src source file/folder\n * @param {string} dest destination file/folder\n * @param {object} [options={}] move options\n * @param {Function} [options.progressCallback] a function that will be called every\n *   time the operation completes on a single file, the srcPath and destPath to the moved\n *   file are passed as argument to the callback `progressCallback(srcPath, destPath)`\n */\nasync function move (files, src, dest, options = {}) {\n  try {\n    const res = await files.copy(src, dest, { progressCallback: options.progressCallback })\n    await files.delete(src)\n    return res\n  } catch (e) {\n    e.message = `Move operation failed, reason: ${e.message}`\n    throw e\n  }\n}\n")),(0,i.mdx)("p",null,"Here are some usage examples:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},"const files = await Files.init()\nawait move(files, 'my/remote/src/folder/', 'my/remote/dest/')\nawait move(files, 'my/remote/src/folder/file.txt', 'my/remote/dest/file2.md') // will move and rename the file\nawait move(files, 'my/remote/src/folder/file.txt', 'my/remote/dest/') // will move file.txt to dest folder\nawait move(files, 'my/remote/src/folder/', 'my/remote/dest/') // move folder to the dest folder\nawait move(files, 'my/remote/folder/', 'my/remote/dest') // will rename folder to dest\n")))}d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-guides-tips-tricks-md-8daa7dc3dfc0339a4a17.js.map