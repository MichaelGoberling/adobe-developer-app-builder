{"version":3,"file":"component---src-pages-resources-cron-jobs-index-md-7e715beb8f7a5c117ae6.js","mappings":"4SAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,oCADR,qCAGA,4IACA,gOACA,0BAAW,cAAGC,WAAW,IACrB,KAAQ,8CADD,yBAAX,+IAEiL,cAAGA,WAAW,IAC3L,KAAQ,sDADqK,4BAFjL,iDAOH,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://adobe-developer-app-builder/./src/pages/resources/cron-jobs/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/adobe-developer-app-builder/adobe-developer-app-builder/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"scheduling-cron-jobs-with-alarms\"\n    }}>{`Scheduling Cron Jobs with Alarms`}</h1>\n    <p>{`This codelab will guide you through creating cron jobs in an App Builder application using OpenWhisk Alarms Package. `}</p>\n    <p>{`App Builder simplifies the process of building Cloud Native Applications that leverage Adobe I/O Runtime, which is based on OpenWhisk and uses its architecture to provide function-as-a-service (FaaS). `}</p>\n    <p>{`For `}<a parentName=\"p\" {...{\n        \"href\": \"../../guides/index.md#headless-application\"\n      }}>{`headless applications`}</a>{`, you may need to set up recurring jobs or tasks, such as invoking a data importing action every hour. To achieve that, you could leverage `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/apache/openwhisk-package-alarms\"\n      }}>{`OpenWhisk Alarms Package`}</a>{` to fire a trigger at a specified frequency. `}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}