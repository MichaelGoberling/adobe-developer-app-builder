"use strict";(self.webpackChunkadobe_developer_app_builder=self.webpackChunkadobe_developer_app_builder||[]).push([[6217],{67534:function(e,n,r){r.r(n),r.d(n,{_frontmatter:function(){return d},default:function(){return m}});var a=r(87462),t=r(63366),o=(r(15007),r(64983)),s=r(91515),i=["components"],d={},p={_frontmatter:d},c=s.Z;function m(e){var n=e.components,r=(0,t.Z)(e,i);return(0,o.mdx)(c,(0,a.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"real-time-data-from-adobe-analytics-api-14"},"Real-time data from Adobe Analytics API 1.4"),(0,o.mdx)("p",null,"Demonstrating how to write an action accessing Adobe Analytics Real-time API 1.4"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Demonstrating how to write an action accessing Adobe Analytics Real-time API 1.4\n *\n * Sample curl request:\n * curl --location --request GET 'https://my-namespace.adobeioruntime.net/api/v1/web/my-app-0.0.1/analytics14' \\\n * --header 'Authorization: Bearer ey123...' \\\n * --header 'x-gw-ims-org-id: some-org-id' \\\n * --header 'x-api-key: some-key'\n */\n\nconst fetch = require('node-fetch')\nconst { Core } = require('@adobe/aio-sdk')\nconst { errorResponse, getBearerToken, stringParameters, checkMissingRequestInputs } = require('../utils')\n\n// main function that will be executed by Adobe I/O Runtime\nasync function main (params) {\n  // create a Logger\n  const logger = Core.Logger('main', { level: params.LOG_LEVEL || 'info' })\n\n  try {\n    // 'info' is the default level if not set\n    logger.info('Calling the main action')\n\n    // log parameters, only if params.LOG_LEVEL === 'debug'\n    logger.debug(stringParameters(params))\n\n    // check for missing request input parameters and headers\n    const requiredParams = [/* add required params */]\n    const requiredHeaders = ['Authorization', 'x-gw-ims-org-id', 'x-api-key']\n    const errorMessage = checkMissingRequestInputs(params, requiredParams, requiredHeaders)\n    if (errorMessage) {\n      // return and log client errors\n      return errorResponse(400, errorMessage, logger)\n    }\n\n    // extract the user Bearer token from the Authorization header\n    const token = getBearerToken(params)\n\n    // sample payload, please customize according to your report set-up\n    const data = {\n      \"reportDescription\": {\n        \"source\": \"realtime\",\n        \"reportSuiteID\": \"change-me\",\n        \"metrics\": [\n          { \"id\": \"pageviews\" }\n        ],\n        \"elements\": [\n          {\n            \"id\": \"page\",\n            \"search\": { \"keywords\": [ \"product\" ] },\n            \"top\": 200\n          }\n        ],\n        \"dateFrom\": \"-5 minutes\"\n      }\n    }\n    const apiEndpoint = 'https://api.omniture.com/admin/1.4/rest/?method=Report.Run'\n    const headers = {\n      'x-api-key': params.headers['x-api-key'],\n      'Authorization': `Bearer ${token}`,\n      'x-ims-org-id': params.headers['x-gw-ims-org-id'],\n      'x-proxy-global-company-id': 'change-me',\n      'Content-Type': 'application/json'\n    }\n\n    const res = await fetch(apiEndpoint, { method: 'POST', headers: headers, body: JSON.stringify(data) })\n    const response = {\n      statusCode: 200,\n      body: {\n        data: await res.json()\n      }\n    }\n    return response\n  } catch (error) {\n    // log any server errors\n    logger.error(error)\n    // return with 500\n    return errorResponse(500, 'server error', logger)\n  }\n}\n\nexports.main = main\n")))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-resources-sample-apps-code-snippets-analytics-md-86c83fe0ed29aeff149f.js.map