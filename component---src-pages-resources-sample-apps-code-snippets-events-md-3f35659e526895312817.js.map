{"version":3,"file":"component---src-pages-resources-sample-apps-code-snippets-events-md-3f35659e526895312817.js","mappings":"4SAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,qBADR,uBAGA,yLACA,qBAAK,iBAAMC,WAAW,MAClB,UAAa,uBADZ,4jFAoFR,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://adobe-developer-app-builder/./src/pages/resources/sample_apps/code_snippets/events.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/adobe-developer-app-builder/adobe-developer-app-builder/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"io-events-handler\"\n    }}>{`I/O Events handler`}</h1>\n    <p>{`Demonstrating how to write an event handler for webhook calls. This action is expose as a web action, you can use its URL to register as a webhook for I/O Events.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * Demonstrating how to write an event handler for webhook calls\n *\n * This action is expose as a web action, you can use its URL to register as a webhook for I/O Events\n */\nconst { Core } = require('@adobe/aio-sdk')\nconst fetch = require('node-fetch')\nconst { errorResponse, stringParameters, checkMissingRequestInputs } = require('../utils')\n\n// Set up an Incoming Webhooks for your team: https://api.slack.com/incoming-webhooks\n// Then update the following variables with your slack config values\nconst slackWebhook = 'https://hooks.slack.com/services/AAA/BBB/CCC'\nconst slackChannel = 'general'\n\n// main function that will be executed by Adobe I/O Runtime\nasync function main (params) {\n  // create a Logger\n  const logger = Core.Logger('main', { level: params.LOG_LEVEL || 'info' })\n\n  try {\n    // 'info' is the default level if not set\n    logger.info('Calling the main action')\n\n    // log parameters, only if params.LOG_LEVEL === 'debug'\n    logger.debug(stringParameters(params))\n\n    if (params.challenge) {\n      return { body: { challenge: params.challenge } }\n    }\n\n    // check for missing request input parameters and headers\n    const requiredParams = ['event']\n    const requiredHeaders = []\n    const errorMessage = checkMissingRequestInputs(params, requiredParams, requiredHeaders)\n    if (errorMessage) {\n      // return and log client errors\n      return errorResponse(400, errorMessage, logger)\n    }\n\n    // NOTE: please customize the following lines based on the event object data type you receive from I/O Events\n    const eventDetail = params.event['activitystreams:object']\n     \n    const slackMessage = params.event['@type'] + \" Event for: \" + eventDetail['xdmAsset:asset_name'] + \" at \" + eventDetail['xdmAsset:path']\n      \n    const payload = {\n      channel: slackChannel,\n      username: 'incoming-webhook',\n      text: slackMessage,\n      mrkdwn: true\n    }\n      \n    var slackOpts = {\n      method: 'POST',\n      headers: {\n        'Cache-Control': 'no-cache',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    }\n\n    await fetch(slackWebhook, slackOpts)\n\n    const response = {\n      statusCode: 200,\n      body: { message: 'posted to slack' }\n    }\n\n    // log the response status code\n    logger.info(\\`\\${response.statusCode}: successful request\\`)\n    return response\n  } catch (error) {\n    // log any server errors\n    logger.error(error)\n    // return with 500\n    return errorResponse(500, 'server error', logger)\n  }\n}\n\nexports.main = main\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}