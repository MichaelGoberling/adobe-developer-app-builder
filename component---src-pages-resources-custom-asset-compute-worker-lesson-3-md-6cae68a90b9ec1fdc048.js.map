{"version":3,"file":"component---src-pages-resources-custom-asset-compute-worker-lesson-3-md-6cae68a90b9ec1fdc048.js","mappings":"4SAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,wBADR,yBAGA,6DACA,qBAAK,iBAAMC,WAAW,MAClB,UAAa,iBADZ,wCAIL,qFACA,oBACE,eAAIA,WAAW,MAAf,gNACA,eAAIA,WAAW,MAAf,yDAA6E,mBAAQA,WAAW,MAAnB,kCAA7E,MACA,eAAIA,WAAW,MAAf,wCAA4D,mBAAQA,WAAW,MAAnB,8BAA5D,MACA,eAAIA,WAAW,MAAf,8EAAkG,uBAAYA,WAAW,MAAvB,OAAlG,iDAEF,2CAA4B,uBAAYA,WAAW,KAAvB,QAA5B,sMAEA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,usBAoBL,2BAAY,uBAAYA,WAAW,KAAvB,mBAAZ,qBAA4F,uBAAYA,WAAW,KAAvB,kCAA5F,oBAA0L,uBAAYA,WAAW,KAAvB,UAA1L,wFACE,uBAAYA,WAAW,KAAvB,SADF,wIAEwB,uBAAYA,WAAW,KAAvB,SAFxB,aAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,42BA+BL,oMAEA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,yDAIL,0EAA2D,uBAAYA,WAAW,KAAvB,gEAA3D,+CAEA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,83DA2CR,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://adobe-developer-app-builder/./src/pages/resources/custom-asset-compute-worker/lesson3.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/adobe-developer-app-builder/adobe-developer-app-builder/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"implement-the-worker\"\n    }}>{`Implement the worker`}</h1>\n    <p>{`Create a new application using AIO CLI`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$> aio app init my-custom-worker\n`}</code></pre>\n    <p>{`Application initialization will ask you a couple of questions:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`To select your Adobe Organization, followed by the console project selection (pick the one you created in previous steps) and finally choose a project workspace where you added all the required services.`}</li>\n      <li parentName=\"ol\">{`Then, to pick the components of the app. Select only `}<strong parentName=\"li\">{`Actions: Deploy Runtime action`}</strong>{`.`}</li>\n      <li parentName=\"ol\">{`On the type of action, choose only: `}<strong parentName=\"li\">{`Adobe Asset Compute worker`}</strong>{`.`}</li>\n      <li parentName=\"ol\">{`At last step, you need to provide the name of the worker and wait for the `}<inlineCode parentName=\"li\">{`npm`}</inlineCode>{` to finish installing all the dependencies.`}</li>\n    </ol>\n    <p>{`Once it's done, edit `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file and add the following lines. These are the environment variables the AIO CLI uses. In a\nproduction deployment, you can set them directly on your CI/CD pipelines as environment variables.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`## A path to the private.key you obtained from Adobe Console\nASSET_COMPUTE_PRIVATE_KEY_FILE_PATH=/path/to/the/private.key\n\n## Azure blob storage container you created to simulate AEM binaries cloud storage\nAZURE_STORAGE_ACCOUNT=your-storage-account\nAZURE_STORAGE_KEY=your-storage-key\nAZURE_STORAGE_CONTAINER_NAME=source\n\n# Azure blob storage container used by the imgIX as assets source\nIMGIX_STORAGE_ACCOUNT=your-storage-account\nIMGIX_STORAGE_KEY=your-storage-key\nIMGIX_STORAGE_CONTAINER_NAME=imgix\n\n# A security token you obtained when setting up imgIX source\nIMGIX_SECURE_TOKEN=imgx-token\n# A imgix domain you defined when setting up imgIX source\nIMGIX_DOMAIN=your-subdomain.imgix.net\n`}</code></pre>\n    <p>{`Edit `}<inlineCode parentName=\"p\">{`ext.config.yaml`}</inlineCode>{` file inside the `}<inlineCode parentName=\"p\">{`src/dx-asset-compute-worker-1/`}</inlineCode>{` folder and add `}<inlineCode parentName=\"p\">{`inputs`}</inlineCode>{` object, as shown below. This file describes IO Runtime action to be deployed.\nAnd `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` param sets the default parameters with values referenced to our environment variables. Those params are\navailable in action JS as `}<inlineCode parentName=\"p\">{`param`}</inlineCode>{` object.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`operations:\n  workerProcess:\n    - type: action\n      impl: dx-asset-compute-worker-1/worker\nhooks:\n  post-app-run: adobe-asset-compute devtool\n  test: adobe-asset-compute test-worker\nactions: actions\nruntimeManifest:\n  packages:\n    dx-asset-compute-worker-1:\n      license: Apache-2.0\n      actions:\n        czeczek-worker:\n          function: actions/worker/index.js\n          web: 'yes'\n          runtime: 'nodejs:14'\n          limits:\n            concurrency: 10\n          inputs:\n              imgixStorageAccount: $IMGIX_STORAGE_ACCOUNT\n              imgixStorageKey: $IMGIX_STORAGE_KEY\n              imgixStorageContainerName: $IMGIX_STORAGE_CONTAINER_NAME\n              imgixSecureToken: $IMGIX_SECURE_TOKEN\n              imgixDomain: $IMGIX_DOMAIN\n          annotations:\n            require-adobe-auth: true\n            final: true\n`}</code></pre>\n    <p>{`We also need to add two dependencies to our project. These are the libraries we will use to simplify access to the Azure\nblob storage and to generated signed URL for imgIX.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$> npm install @adobe/aio-lib-files imgix-core-js\n`}</code></pre>\n    <p>{`Finally, edit the worker source code (located under `}<inlineCode parentName=\"p\">{`src/dx-asset-compute-worker-1/actions/<worker-name>/index.js`}</inlineCode>{`) and replace it\nwith the following code.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`'use strict';\n\nconst { worker } = require('@adobe/asset-compute-sdk');\n//Convinient library provided by adobe that abstract away managing files on cloud storages\nconst filesLib = require('@adobe/aio-lib-files');\nconst { downloadFile } = require('@adobe/httptransfer');\nconst ImgixClient = require('imgix-core-js');\n\nexports.main = worker(async (source, rendition, params) => {\n  //Initialize blob storage client used by imgix\n  //We're reading the parameters we defined in manifest.yml\n  const targetStorage = await filesLib.init({\n    azure: {\n      storageAccount: params.imgixStorageAccount,\n      storageAccessKey: params.imgixStorageKey,\n      containerName: params.imgixStorageContainerName,\n    },\n  });\n  //Copy source asset from the AEM binaries storage to the Azure blob storage for imgIX\n  // localSrc:true means, the first parameters points to the file in the local file system (asset-compute-sdk abstracts the source blob storage so it's visible as local file)\n  // Second arguments defines the path on the target blob storage. We use the same path just to simplify things\n  await targetStorage.copy(source.path, source.path, { localSrc: true });\n\n  //Initialize imgix client responsible for generation of signed URLs\n  //to our assets accessed via imgIX subdomain\n  //We're getting the config params we defined in manifest.yml\n  const client = new ImgixClient({\n    domain: params.imgixDomain,\n    secureURLToken: params.imgixSecureToken,\n  });\n\n  //Generate signed URL with the params send by AEM and sign it.\n  //All the parameters send by AEM are available under rendition.instructions object\n  const url = client.buildURL(source.path, JSON.parse(rendition.instructions.imgix));\n\n  //Finally, download a rendition from a given url and store in AEM azure blob storage so it will be visible in AEM as a rendition\n  await downloadFile(url, rendition.path);\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}