{"version":3,"file":"component---src-pages-guides-configuration-index-md-18bca6955b02332fe7db.js","mappings":"4SAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,mCADR,oCAGA,eACE,GAAM,YADR,aAGA,4DAA6C,mBAAQC,WAAW,KAAnB,6CAA7C,MACA,oBACE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,mBAApB,6FACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,QAApB,qFACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,QAApB,yBAA8F,uBAAYA,WAAW,MAAvB,OAA9F,oEAEF,4BAAa,uBAAYA,WAAW,KAAvB,QAAb,SAAsE,uBAAYA,WAAW,KAAvB,QAAtE,WAAiI,mBAAQA,WAAW,KAAnB,8CAAjI,MACA,eACE,GAAM,kBACL,uBAAYA,WAAW,MAAvB,qBACH,eACE,GAAM,+BADR,mCAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,u2BAmCL,eACE,GAAM,yCADR,0CAGA,0BAAW,uBAAYA,WAAW,KAAvB,mBAAX,4CAAkH,uBAAYA,WAAW,KAAvB,eAAlH,SAAkL,uBAAYA,WAAW,KAAvB,cAAlL,6BAEA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,+IAWL,yFACA,eACE,GAAM,wBADR,yBAGA,0NAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,0zBAuBL,eACE,GAAM,oBADR,qBAGA,0BAAW,uBAAYA,WAAW,KAAvB,mBAAX,wGACyB,cAAGA,WAAW,IACnC,KAAQ,gFADa,QADzB,yCAKA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,geAoBL,eACE,GAAM,kCADR,mCAGA,qDAAsC,uBAAYA,WAAW,KAAvB,WAAtC,oCAA6H,cAAGA,WAAW,IACvI,KAAQ,wFADiH,QAA7H,MAGA,eACE,GAAM,oCADR,qCAGA,eACE,GAAM,mBADR,oBAGA,0BAAW,uBAAYA,WAAW,KAAvB,oBAAX,gHACA,oBACE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,iBAApB,qEACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,6BAApB,gDAEF,eACE,GAAM,2BACL,uBAAYA,WAAW,MAAvB,iBAFH,gBAGA,sEAAuD,uBAAYA,WAAW,KAAvB,QAAvD,4FAC2B,uBAAYA,WAAW,KAAvB,QAD3B,wBACmG,uBAAYA,WAAW,KAAvB,cADnG,wBACiL,uBAAYA,WAAW,KAAvB,QADjL,8BAEA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,uIAUL,eACE,GAAM,sCACL,uBAAYA,WAAW,MAAvB,6BAFH,gBAGA,wEAAyD,uBAAYA,WAAW,KAAvB,iBAAzD,gIAC2B,uBAAYA,WAAW,KAAvB,QAD3B,0BACqG,uBAAYA,WAAW,KAAvB,oCADrG,2BAC4M,uBAAYA,WAAW,KAAvB,mBAD5M,MAEA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,oWAgBL,eACE,GAAM,yBADR,QAEW,uBAAYA,WAAW,MAAvB,YAFX,eAGA,0BAAW,uBAAYA,WAAW,KAAvB,YAAX,+CAA8G,uBAAYA,WAAW,KAAvB,mBAA9G,qDAC4B,uBAAYA,WAAW,KAAvB,iBAD5B,wCAC6H,uBAAYA,WAAW,KAAvB,uCAD7H,WAEA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,wFAML,qDAAsC,uBAAYA,WAAW,KAAvB,uCAAtC,oCACA,eACE,GAAM,QACL,uBAAYA,WAAW,MAAvB,UACH,0BAAW,uBAAYA,WAAW,KAAvB,QAAX,4BACA,oBACE,eAAIA,WAAW,MAAf,qDACA,eAAIA,WAAW,MAAf,uCAA2D,uBAAYA,WAAW,MAAvB,SAA3D,MACA,eAAIA,WAAW,MAAf,uCAA2D,uBAAYA,WAAW,MAAvB,OAA3D,sBAAiI,uBAAYA,WAAW,MAAvB,QAAjI,mCAEF,eACE,GAAM,QACL,uBAAYA,WAAW,MAAvB,UACH,0BAAW,uBAAYA,WAAW,KAAvB,QAAX,iHAC2B,uBAAYA,WAAW,KAAvB,eAD3B,gDAEA,eACE,GAAM,+BADR,gCAGA,+CAAgC,uBAAYA,WAAW,KAAvB,kBAAhC,sMAEA,uEAAwD,uBAAYA,WAAW,KAAvB,mBAAxD,uBACA,oBACE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,QAApB,iFAAsJ,uBAAYA,WAAW,MAAvB,WAAtJ,WACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,iBAApB,qCACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,gBAApB,qBACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,QAApB,wBAEF,eACE,GAAM,2EADR,4EAGA,oBACE,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,uDADQ,wDAApB,+GAML,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://adobe-developer-app-builder/./src/pages/guides/configuration/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/adobe-developer-app-builder/adobe-developer-app-builder/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"app-builder-configuration-files\"\n    }}>{`App Builder Configuration Files`}</h1>\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`An app has three configuration files, `}<strong parentName=\"p\">{`defined in the root of the project folder`}</strong>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`app.config.yaml`}</inlineCode>{` is the main configuration file, defining the application's behavior and implementation.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`.env`}</inlineCode>{` is used to store secrets and environment variables available during build time.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`.aio`}</inlineCode>{` is populated by the `}<inlineCode parentName=\"li\">{`aio`}</inlineCode>{` CLI to store the current Developer Console Workspace details.`}</li>\n    </ul>\n    <p>{`Note: `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`.aio`}</inlineCode>{` files `}<strong parentName=\"p\">{`should not be committed to version control`}</strong>{`.`}</p>\n    <h2 {...{\n      \"id\": \"appconfigyaml\"\n    }}><inlineCode parentName=\"h2\">{`app.config.yaml`}</inlineCode></h2>\n    <h3 {...{\n      \"id\": \"tldr-give-me-a-full-example\"\n    }}>{`Tl;dr: give me a full example:`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# standalone application config\napplication:\n  hostname: 'customhost'\n  runtimeManifest:\n    packages:\n      application-pkg:\n        actions:\n          count-apples:\n            function: actions/count-apples/index.js\n            web: 'yes'\n            annotations:\n              require-adobe-auth: true\n  hooks:\n    post-app-build: 'echo hook'\n\n# extension points config\nextensions:\n  dx/excshell/1:\n    # $include directive stores config in a separate file\n    $include: ./dx-excshell-1/ext.config.yaml\n  dx/asset-compute/worker/1:\n    operations:\n      workerProcess:\n        - type: action\n          impl: dx-asset-compute-worker-1/myworker\n    runtimeManifest:\n      packages:\n        dx-asset-compute-worker-1:\n          actions:\n            myworker:\n              function: actions/worker/index.js\n              web: 'yes'\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"standalone-application-and-extensions\"\n    }}>{`Standalone application and extensions`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`app.config.yaml`}</inlineCode>{` file can contain two top level fields: `}<inlineCode parentName=\"p\">{`application`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`extensions`}</inlineCode>{`.\nOnly one is required.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# app.config.yaml\n\napplication:\n  <common-config>\nextensions:\n  <extension-type>:\n    <extension-definition>\n    <common-config>\n`}</code></pre>\n    <p>{`A project can implement a standalone application and N extensions.`}</p>\n    <h3 {...{\n      \"id\": \"common-configuration\"\n    }}>{`Common configuration`}</h3>\n    <p>{`Extensions and the standalone application behave in a similar way.\nBoth can contain a UI and actions and both support a common configuration.\nThe common configuration contains following fields:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# <common-config>\n\nruntimeManifest:\n  <runtime-manifest>\nhooks:\n  <app-hooks>\nactions: <path to action folder>\nweb: <path to web folder>\nunitTest: <path to unit test folder>\ne2eTest: <path to e2e test folder>\ndist: <path to build folder>\nhtmlCacheDuration: <cache duration for UI html files, default: 60s>\njsCacheDuration: <cache duration for UI JS files, default: about a week>\ncssCacheDuration: <cache duration for UI JS files, default: about a week>\nimageCacheDuration: <cache duration for UI JS files, default: about a week>\ntvmurl: <alternative tvm url used to upload the UI>\nawsaccesskeyid: <upload UI to own s3, provide credentials>\nawssecretaccesskey: <upload UI to own s3, provide credentials>\ns3bucket: <upload UI to own s3, provide credentials>\nhostname: <alternative hostname for the UI>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"runtime-manifest\"\n    }}>{`Runtime Manifest`}</h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`runtimeManifest`}</inlineCode>{` field holds the backend configuration deployed into Adobe I/O Runtime.\nThe full spec can be found `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/apache/openwhisk-wskdeploy/tree/master/specification/html\"\n      }}>{`here`}</a>{`\nHere is an example to get started:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`runtimeManifest\n   packages:\n     myapp:\n       license: Apache-2.0\n       actions:\n         generic:\n           # path relative to the configuration file\n           function: src/myapp/actions/generic/index.js\n           web: 'yes'\n           annotations:\n            require-adobe-auth: true\n         target:\n           function: src/myapp/actions/target/index.js\n           web: 'yes'\n           limits:\n             timeout: 60\n             memory: 512\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"hooks-to-customize-the-tooling\"\n    }}>{`Hooks to customize the tooling`}</h4>\n    <p>{`Hooks can be used to customize `}<inlineCode parentName=\"p\">{`aio app`}</inlineCode>{` commands. Hooks are documented `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/AdobeDocs/project-firefly/blob/main/src/pages/guides/app-hooks.md\"\n      }}>{`here`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"extension-specific-configuration\"\n    }}>{`Extension specific configuration`}</h3>\n    <h4 {...{\n      \"id\": \"extension-types\"\n    }}>{`Extension types`}</h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`<extension-type>`}</inlineCode>{` indicates which product the extension is extending, currently we support the following product extensions:`}</p>\n    <ol>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`dx/excshell/1`}</inlineCode>{` to implement an Experience Cloud Shell single page application.`}</li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`dx/asset-compute/worker/1`}</inlineCode>{` to implement an AEM Asset Compute worker.`}</li>\n    </ol>\n    <h4 {...{\n      \"id\": \"dxexcshell1-definition\"\n    }}><inlineCode parentName=\"h4\">{`dx/excshell/1`}</inlineCode>{` definition`}</h4>\n    <p>{`The Experience Cloud Shell extension supports a `}<inlineCode parentName=\"p\">{`view`}</inlineCode>{` operation that points to the entry html file of the SPA.\nIn the following example the `}<inlineCode parentName=\"p\">{`impl`}</inlineCode>{` field points to an `}<inlineCode parentName=\"p\">{`index.html`}</inlineCode>{` file stored in the `}<inlineCode parentName=\"p\">{`web/`}</inlineCode>{` folder of the extension.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`extensions\n  dx/excshell/1:\n    operations:\n      view:\n        - type: web\n          impl: index.html\n     web-src: web/\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"dxasset-computeworker1-definition\"\n    }}><inlineCode parentName=\"h4\">{`dx/asset-compute/worker/1`}</inlineCode>{` definition`}</h4>\n    <p>{`The AEM Asset Compute worker extension supports a `}<inlineCode parentName=\"p\">{`workerProcess`}</inlineCode>{` operation that points to the backend Adobe I/O Runtime action implementing the worker logic.\nIn the following example the `}<inlineCode parentName=\"p\">{`impl`}</inlineCode>{` field points to the  `}<inlineCode parentName=\"p\">{`dx-asset-compute-worker-1/worker`}</inlineCode>{` action defined in the `}<inlineCode parentName=\"p\">{`runtimeManifest`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`extensions\n  dx/asset-compute/worker/1:\n    operations:\n      workerProcess:\n        - type: action\n          impl: dx-asset-compute-worker-1/myworker\n    runtimeManifest:\n      packages:\n        dx-asset-compute-worker-1:\n          actions:\n            myworker:\n              function: actions/worker/index.js\n              web: 'yes'\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"the-include-directive\"\n    }}>{`The `}<inlineCode parentName=\"h3\">{`$include`}</inlineCode>{` directive`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`$include`}</inlineCode>{` directive allows to defer any part of the `}<inlineCode parentName=\"p\">{`app.config.yaml`}</inlineCode>{` to another file.\nIn the following example, the `}<inlineCode parentName=\"p\">{`dx/excshell/1`}</inlineCode>{` configuration is stored in another `}<inlineCode parentName=\"p\">{`./src/dx-excshell-1/ext.config.yaml`}</inlineCode>{` file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`extensions:\n  dx/excshell/1:\n    $include: ./src/dx-excshell-1/ext.config.yaml\n`}</code></pre>\n    <p>{`Configuration paths defined in `}<inlineCode parentName=\"p\">{`./src/dx-excshell-1/ext.config.yaml`}</inlineCode>{` must be relative to that file.`}</p>\n    <h2 {...{\n      \"id\": \"env\"\n    }}><inlineCode parentName=\"h2\">{`.env`}</inlineCode></h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file is used to store:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`secrets to be injected into I/O Runtime Actions.`}</li>\n      <li parentName=\"ol\">{`environment variables available to `}<inlineCode parentName=\"li\">{`hooks`}</inlineCode>{`.`}</li>\n      <li parentName=\"ol\">{`auto generated secrets used by the `}<inlineCode parentName=\"li\">{`aio`}</inlineCode>{` CLI, prefixed by `}<inlineCode parentName=\"li\">{`AIO_`}</inlineCode>{`, those should not be edited.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"aio\"\n    }}><inlineCode parentName=\"h2\">{`.aio`}</inlineCode></h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`.aio`}</inlineCode>{` file is auto generated and contains Developer Console specific configuration.\nThis file is updated via the `}<inlineCode parentName=\"p\">{`aio app use`}</inlineCode>{` command and should not be edited manually.`}</p>\n    <h2 {...{\n      \"id\": \"legacy-configuration-system\"\n    }}>{`Legacy configuration system`}</h2>\n    <p>{`Apps initialized using a `}<inlineCode parentName=\"p\">{`@adobe/aio-cli`}</inlineCode>{` CLI version prior to 8.x use a legacy configuration system that we still support in newer CLI versions.\nThose apps do not support extensions, and only get deployed as standalone applications.`}</p>\n    <p>{`The legacy configuration system does not have an `}<inlineCode parentName=\"p\">{`app.config.yaml`}</inlineCode>{` and instead uses:`}</p>\n    <ol>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`.aio`}</inlineCode>{` to store common configuration bits, but hooks and Runtime Manifest, such as `}<inlineCode parentName=\"li\">{`actions`}</inlineCode>{` path.`}</li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`manifest.yaml`}</inlineCode>{` to stores the Runtime Manifest.`}</li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`package.json`}</inlineCode>{` to store hooks.`}</li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`.env`}</inlineCode>{` behaves the same.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"migrating-between-standalone-application-and-dx-experience-cloud-spa-v1\"\n    }}>{`Migrating between Standalone Application and DX Experience Cloud SPA v1`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"migrations/standalone_to_dx_experience_cloud_spa.md\"\n        }}>{`Standalone Application to DX Experience Cloud SPA v1`}</a>{` - Useful if you can't seem to view your application in the App Builder Catalog in Adobe Experience Cloud.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}