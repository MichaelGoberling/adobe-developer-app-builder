{"version":3,"file":"component---src-pages-resources-todo-app-lesson-2-md-2880baee5af9fbe63fcc.js","mappings":"2SAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,kCADR,oCAGA,4MAEA,eACE,GAAM,6BADR,8BAGA,+DAAgD,uBAAYC,WAAW,KAAvB,kBAAhD,2EAAqL,uBAAYA,WAAW,KAAvB,WAArL,8BAAsQ,uBAAYA,WAAW,KAAvB,WAAtQ,mFACmE,uBAAYA,WAAW,KAAvB,iBADnE,MAEA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,oCAML,yEAA0D,uBAAYA,WAAW,KAAvB,qBAA1D,MACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,kEAIL,2FAA4E,uBAAYA,WAAW,KAAvB,WAA5E,aACA,eACE,GAAM,yBADR,0BAGA,qCAAsB,cAAGA,WAAW,IAChC,KAAQ,0CADU,iBAAtB,mFAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,yCAIL,6DACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,yDAIL,eACE,GAAM,iBADR,kBAGA,sCAAuB,cAAGA,WAAW,IACjC,KAAQ,iEADW,QAAvB,2CAGA,eACE,GAAM,cADR,eAGA,6CAA8B,uBAAYA,WAAW,KAAvB,aAA9B,sCACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,8CAIL,0BAAW,uBAAYA,WAAW,KAAvB,aAAX,4CACA,oBACE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,UAApB,kCACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,QAApB,yBACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,UAApB,6CACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,UAApB,4BAEF,sEACA,oBACE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,QAApB,wBACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,QAApB,yCAEF,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,iDAIL,eACE,GAAM,mBADR,oBAGA,8EAA+D,uBAAYA,WAAW,KAAvB,YAA/D,gBAAmI,uBAAYA,WAAW,KAAvB,eAAnI,MACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,iLAYL,0BAAW,uBAAYA,WAAW,KAAvB,YAAX,wEACA,6FAA8E,uBAAYA,WAAW,KAAvB,aAA9E,8BACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,i0EA6EL,iDAAkC,uBAAYA,WAAW,KAAvB,QAAlC,uBAAyG,uBAAYA,WAAW,KAAvB,eAAzG,4BAA4L,uBAAYA,WAAW,KAAvB,YAA5L,6DAC8C,uBAAYA,WAAW,KAAvB,MAD9C,0BACsH,uBAAYA,WAAW,KAAvB,YADtH,mBAEA,+CAAgC,cAAGA,WAAW,IAC1C,KAAQ,8FADoB,QAAhC,KAKH,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://adobe-developer-app-builder/./src/pages/resources/todo-app/lesson2.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/adobe-developer-app-builder/adobe-developer-app-builder/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"lesson-2-setup-runtime-actions\"\n    }}>{`Lesson 2: Setup Runtime actions`}</h1>\n    <p>{`In this lesson, we'll setup the Runtime actions to handle the CRUD operations.\nThe app we're building can handle multiple todo lists and each todo list can have several todo items.`}</p>\n    <h2 {...{\n      \"id\": \"global-configuration-file\"\n    }}>{`Global configuration file`}</h2>\n    <p>{`To avoid long todo lists, we'll define a `}<inlineCode parentName=\"p\">{`MAX_TODO_ITEMS`}</inlineCode>{` value within a global configuration file that we will import from the `}<inlineCode parentName=\"p\">{`actions`}</inlineCode>{` folder but also from the `}<inlineCode parentName=\"p\">{`web-src`}</inlineCode>{` folder.\nWe'll create the file at the root of the App Builder App and name it `}<inlineCode parentName=\"p\">{`defaults.json`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"MAX_TODO_ITEMS\": 10\n}\n`}</code></pre>\n    <p>{`Then we're going to import the value in our action `}<inlineCode parentName=\"p\">{`todolist/index.js`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const { MAX_TODO_ITEMS } = require('../../defaults.json');\n`}</code></pre>\n    <p>{`In the next lesson, we'll also show how to import the value from the `}<inlineCode parentName=\"p\">{`web-src`}</inlineCode>{` folder.`}</p>\n    <h2 {...{\n      \"id\": \"install-aio-lib-state\"\n    }}>{`Install aio-lib-state`}</h2>\n    <p>{`We'll be using `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/adobe/aio-lib-state\"\n      }}>{`aio-lib-state`}</a>{` to store the todo items. So first we're going to install the dependency with:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm i --save @adobe/aio-lib-state\n`}</code></pre>\n    <p>{`Then we're going to import it as well:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const stateLib = require('@adobe/aio-lib-state');\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"main-function\"\n    }}>{`Main function`}</h2>\n    <p>{`We'll setup the `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete\"\n      }}>{`CRUD`}</a>{` operations inside the main function. `}</p>\n    <h3 {...{\n      \"id\": \"parameters\"\n    }}>{`Parameters`}</h3>\n    <p>{`First, we'll define an `}<inlineCode parentName=\"p\">{`operation`}</inlineCode>{` parameter and make it required: `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const requiredParams = ['operation']; \n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`operation`}</inlineCode>{` parameter can take 4 possible values: `}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`create`}</inlineCode>{` to create an empty todo list`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`read`}</inlineCode>{` to read a todo list`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`update`}</inlineCode>{` to update a todo list with a todo item `}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`delete`}</inlineCode>{` to delete a todo list`}</li>\n    </ul>\n    <p>{`We'll also use additional optional parameters: `}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`name`}</inlineCode>{` to identify a list`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`todo`}</inlineCode>{` to identify a todo inside a list  `}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const { operation, name, todo } = params;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"crud-operations\"\n    }}>{`CRUD operations`}</h3>\n    <p>{`Next, we'll initialize the state library and retrieve a `}<inlineCode parentName=\"p\">{`todolist`}</inlineCode>{` value with `}<inlineCode parentName=\"p\">{`state.get()`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const state = await stateLib.init();\n\nlet todoList = await state.get(\\`todolist\\`);\nif (todoList?.value) {\n  todoList = todoList.value;\n}\nelse {\n  todoList = [];\n}\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`todolist`}</inlineCode>{` will hold all todo lists objects and is an empty array by default.`}</p>\n    <p>{`Finally, we'll define which operation to perform based on the value of `}<inlineCode parentName=\"p\">{`operation`}</inlineCode>{` and return the response.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let body = {};\nswitch (operation) {\n  case 'create':\n    // Find the todo list by name\n    if (!todoList.find(({ name: todoListName }) => todoListName === name)) {\n      // If none found, create an empty list with the given name\n      todoList.unshift({\n        name,\n        todos: []\n      });\n      \n      // Store the new list in the state storage with no expiry time\n      await state.put(\\`todolist\\`, todoList, { ttl: -1 });\n\n      body.message = \\`\"\\${name}\" added.\\`;\n    } else {\n      return errorResponse(400, \\`\"\\${name}\" already exists.\\`, logger);\n    }\n    break;\n\n  case 'read':\n    // Simply return the todo lists\n    body.todoList = todoList;\n    break;\n\n  case 'update':\n    if (todo) {\n      // Find the todo list by name\n      const foundTodoList = todoList.find(({ name: todoListName }) => todoListName === name);\n      if (foundTodoList) {\n        // Find the todo item by id\n        const todoIndex = foundTodoList.todos.findIndex(({ id }) => id === todo.id);\n        if (todoIndex !== -1) {\n          // Update the todo item\n          foundTodoList.todos[todoIndex] = todo;\n          body.message = \\`Todo \"\\${todo.id}\" updated in \"\\${name}\".\\`;\n          \n          await state.put(\\`todolist\\`, todoList, { ttl: -1 });\n        } else {\n          // Create a new todo item\n          if (foundTodoList.todos.length < MAX_TODO_ITEMS) {\n            foundTodoList.todos.unshift(todo);\n            body.message = \\`Todo \"\\${todo.id}\" added to \"\\${name}\".\\`;\n            \n            await state.put(\\`todolist\\`, todoList, { ttl: -1 });\n          } else {\n            return errorResponse(400, \\`Max \\${MAX_TODO_ITEMS} todos reached for \"\\${name}\".\\`, logger);\n          }\n        }\n      } else {\n        return errorResponse(400, \\`\\${name} not found.\\`, logger);\n      }\n    } else {\n      return errorResponse(400, \\`Todo is missing.\\`, logger);\n    }\n    break;\n\n  case 'delete':\n    // Filter out the todo list to delete by name\n    const updatedTodoList = todoList.filter(({ name: todoListName }) => todoListName !== name);\n    \n    await state.put(\\`todolist\\`, updatedTodoList, { ttl: -1 });\n    \n    body.message = \\`\"\\${name}\" todo list deleted.\\`;\n    break;\n\n  default:\n    return errorResponse(400, 'CRUD operation not found', logger);\n}\n\nreturn {\n  statusCode: 200,\n  body\n};\n`}</code></pre>\n    <p>{`For every operation except `}<inlineCode parentName=\"p\">{`read`}</inlineCode>{`, we are using the `}<inlineCode parentName=\"p\">{`state.put()`}</inlineCode>{` function to update the `}<inlineCode parentName=\"p\">{`todolist`}</inlineCode>{` value.\nAdditionally, we set the time to live option to `}<inlineCode parentName=\"p\">{`-1`}</inlineCode>{` so that the value of `}<inlineCode parentName=\"p\">{`todolist`}</inlineCode>{` won't expire.`}</p>\n    <p>{`See the full action code `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/AdobeDocs/adobeio-samples-todoapp/blob/master/actions/todolist/index.js\"\n      }}>{`here`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}