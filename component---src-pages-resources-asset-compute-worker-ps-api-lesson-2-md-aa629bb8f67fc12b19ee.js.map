{"version":3,"file":"component---src-pages-resources-asset-compute-worker-ps-api-lesson-2-md-aa629bb8f67fc12b19ee.js","mappings":"4SAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,8BADR,gCAGA,0MACA,iPACA,mBAAG,eAAIC,WAAW,KAAf,qLACH,oIACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,uMAaL,2IACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,4CAIL,sOAAuN,uBAAYA,WAAW,KAAvB,gCAAvN,mCAAkU,uBAAYA,WAAW,KAAvB,gBAAlU,qDACA,6JAA8I,uBAAYA,WAAW,KAAvB,eAA9I,oHAAyT,uBAAYA,WAAW,KAAvB,yBAAzT,gKACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,wMASL,oDAAqC,uBAAYA,WAAW,KAAvB,kCAArC,8FACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,wOAWR,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://adobe-developer-app-builder/./src/pages/resources/asset-compute-worker-ps-api/lesson2.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/adobe-developer-app-builder/adobe-developer-app-builder/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"lesson-2-configure-the-app\"\n    }}>{`Lesson 2: Configure the app`}</h1>\n    <p>{`As you log in when creating the application, most of the App Builder credentials get collected in your ENV file. However, using the developer tool requires additional credentials.`}</p>\n    <p>{`The developer tool used to test custom applications with the actual Asset Compute service requires a cloud storage container for hosting test files and for receiving and displaying renditions generated by applications.`}</p>\n    <p><em parentName=\"p\">{`Note: This is separate from the cloud storage of Adobe Experience Manager as a Cloud Service. It only applies for developing and testing with the Asset Compute developer tool.`}</em></p>\n    <p>{`You can use either S3 or Azure storage for this purpose by adding credentials of (only) one storage solution.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`# S3 credentials\nS3_BUCKET=\nAWS_ACCESS_KEY_ID=\nAWS_SECRET_ACCESS_KEY=\nAWS_REGION=\n\n# Azure Storage credentials\nAZURE_STORAGE_ACCOUNT=\nAZURE_STORAGE_KEY=\nAZURE_STORAGE_CONTAINER_NAME=\n`}</code></pre>\n    <p>{`After that, add the absolute path to the private key file created while adding services to your App Builder Project:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`ASSET_COMPUTE_PRIVATE_KEY_FILE_PATH=\n`}</code></pre>\n    <p>{`Finally, you would need to download the file from the Adobe Developer Console. Go to the root of the workspace you are using and click on “Download All” in the upper-right corner. The file is downloaded with `}<inlineCode parentName=\"p\">{`<namespace>-<workspace>.json`}</inlineCode>{` as the filename. Rename it to `}<inlineCode parentName=\"p\">{`console.json`}</inlineCode>{` and move it in the root folder of your project.`}</p>\n    <p>{`Once all the credentials are properly configured, you can execute the application with the Asset Compute Developer Tool by the command `}<inlineCode parentName=\"p\">{`aio app run`}</inlineCode>{`. It deploys the action to Adobe I/O Runtime and start the development tool on your local machine, available at `}<inlineCode parentName=\"p\">{`http://localhost:9000`}</inlineCode>{`. You can then upload a test image, specify the rendition request, and then run the test to see the rendition result. Here is an example rendition request:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"renditions\": [\n    {\n        \"worker\": \"https://1234-projectA-workspaceB.adobeioruntime.net/api/v1/web/example-custom-worker-0.0.1/worker\",\n        \"name\": \"custom_rendition.png\"\n    }\n]\n`}</code></pre>\n    <p>{`Looking at the action code in `}<inlineCode parentName=\"p\">{`actions/<worker-name>/index.js`}</inlineCode>{`, you can see what it does is simply copying the source file to generate a new rendition.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const { worker, SourceCorruptError } = require('@adobe/asset-compute-sdk');\nconst fs = require('fs').promises;\n\nexports.main = worker(async (source, rendition) => {\n    await fs.copyFile(source.path, rendition.path);\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}